# --=== Required packages ===--
add_subdirectory(fishpack90)
if (${FISHPACK90_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${FISHPACK90_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${FISHPACK90_LIB})
else()
    message(STATUS "Required external package `FISHPACK90` not ready:")
    message(STATUS "  FISHPACK90_FOUND = " ${FISHPACK90_FOUND})
    message(FATAL_ERROR "Required external package `FISHPACK90` not ready...")
endif()

add_subdirectory(p4est)
if (${P4EST_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${P4EST_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${P4EST_LIB})
else()
    message(STATUS "Required external package `p4est` not ready:")
    message(STATUS "  P4EST_FOUND = " ${P4EST_FOUND})
    message(FATAL_ERROR "Required external package `p4est` not ready...")
endif()

# --=== Optional packages ===--
option(WITH_MATPLOTLIBCPP "Include the matplotlibcpp package" OFF)
if (WITH_MATPLOTLIBCPP)
    add_subdirectory(matplotlibcpp)
    FetchContent_GetProperties(matplotlibcpp)
    if (${matplotlibcpp_POPULATED})
        list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${matplotlibcpp_SOURCE_DIR})
        list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${PYTHON_INCLUDE_DIR})
        list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${NUMPY_INCLUDE_DIR})
        list(APPEND LIST_EXTERNAL_PKGS_LIB ${PYTHON_LIBRARY_DIR})
        target_compile_definitions(common INTERFACE USE_MATPLOTLIBCPP)
    else()
        message(WARNING "Optional package `matplotlibcpp` is set to build but was not found or was unable to configure:")
        message(WARNING "  matplotlibcpp_POPULATED = " ${matplotlibcpp_POPULATED})
        message(WARNING "  PYTHON_ENV_PATH = " ${PYTHON_ENV_PATH})
        message(WARNING "  PYTHON_INCLUDE_DIR = " ${PYTHON_INCLUDE_DIR})
        message(WARNING "  PYTHON_LIBRARY_DIR = " ${PYTHON_LIBRARY_DIR})
        message(WARNING "  NUMPY_INCLUDE_DIR = " ${NUMPY_INCLUDE_DIR})
    endif()
endif()

option(WITH_PETSC "Include the PETSc package" OFF)
if (WITH_PETSC)
    add_subdirectory(petsc)
    if (${PETSC_FOUND})
        list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${PETSC_INCLUDE})
        list(APPEND LIST_EXTERNAL_PKGS_LIB ${PETSC_LIB})
        target_compile_definitions(common INTERFACE USE_PETSC)
    else()
        message(WARNING "Optional package `petsc` is set to build but was not found or was unable to configure:")
        message(WARNING "  PETSC_FOUND = " ${PETSC_FOUND})
        message(WARNING "  PETSC_PATH = " ${PETSC_PATH})
        message(WARNING "  PETSC_INCLUDE = " ${PETSC_INCLUDE})
        message(WARNING "  PETSC_LIB = " ${PETSC_LIB})
    endif()
endif()

set(EXTERNAL_PKGS_INCLUDE ${LIST_EXTERNAL_PKGS_INCLUDE} CACHE INTERNAL "EllipticForest external packages' include directories")
set(EXTERNAL_PKGS_LIB ${LIST_EXTERNAL_PKGS_LIB} CACHE INTERNAL "EllipticForest external packages' library directories")

message(STATUS "Done with external packages:")
message(STATUS "  EXTERNAL_PKGS_INCLUDE = ")
foreach(X ${EXTERNAL_PKGS_INCLUDE})
    message(STATUS "    " ${X})
endforeach()
message(STATUS "  EXTERNAL_PKGS_LIB = ")
foreach(X ${EXTERNAL_PKGS_LIB})
    message(STATUS "    " ${X})
endforeach()